// <auto-generated />
using System;
using DbOperationWithEfCoreApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbOperationWithEfCoreApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922103746_addedauthortable")]
    partial class addedauthortable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedON")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfPages")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.BookPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("BookPrices");
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Currency = "INR",
                            Description = "Indian INR"
                        },
                        new
                        {
                            Id = 2,
                            Currency = "Dollar",
                            Description = "USAD"
                        },
                        new
                        {
                            Id = 3,
                            Currency = "Euro",
                            Description = "Europe"
                        },
                        new
                        {
                            Id = 4,
                            Currency = "Dinar",
                            Description = "Dinar"
                        });
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "For Indian",
                            Title = "Hindi"
                        },
                        new
                        {
                            Id = 2,
                            Description = "For USA",
                            Title = "English"
                        },
                        new
                        {
                            Id = 3,
                            Description = "For Itely",
                            Title = "Italian"
                        },
                        new
                        {
                            Id = 4,
                            Description = "For Germany",
                            Title = "German"
                        });
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.Book", b =>
                {
                    b.HasOne("DbOperationWithEfCoreApp.Data.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("DbOperationWithEfCoreApp.Data.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Author");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.BookPrice", b =>
                {
                    b.HasOne("DbOperationWithEfCoreApp.Data.CurrencyType", null)
                        .WithMany("BookPrice")
                        .HasForeignKey("CurrencyTypeId");
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.CurrencyType", b =>
                {
                    b.Navigation("BookPrice");
                });

            modelBuilder.Entity("DbOperationWithEfCoreApp.Data.Language", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
